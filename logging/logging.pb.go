// Code generated by protoc-gen-go. DO NOT EDIT.
// source: logging.proto

/*
Package logging is a generated protocol buffer package.

It is generated from these files:
	logging.proto

It has these top-level messages:
	AuditRecord
	LoggingRequest
	LoggingData
	LoggingResponse
	QueryRequest
	QueryResponse
*/
package logging

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AuditRecord struct {
	ClientIp string   `protobuf:"bytes,1,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	ServerIp string   `protobuf:"bytes,2,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	Tags     []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	Message  string   `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
}

func (m *AuditRecord) Reset()                    { *m = AuditRecord{} }
func (m *AuditRecord) String() string            { return proto.CompactTextString(m) }
func (*AuditRecord) ProtoMessage()               {}
func (*AuditRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AuditRecord) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *AuditRecord) GetServerIp() string {
	if m != nil {
		return m.ServerIp
	}
	return ""
}

func (m *AuditRecord) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *AuditRecord) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type LoggingRequest struct {
	ClientIp string   `protobuf:"bytes,1,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	ServerIp string   `protobuf:"bytes,2,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	Tags     []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	Message  string   `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
}

func (m *LoggingRequest) Reset()                    { *m = LoggingRequest{} }
func (m *LoggingRequest) String() string            { return proto.CompactTextString(m) }
func (*LoggingRequest) ProtoMessage()               {}
func (*LoggingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoggingRequest) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *LoggingRequest) GetServerIp() string {
	if m != nil {
		return m.ServerIp
	}
	return ""
}

func (m *LoggingRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *LoggingRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type LoggingData struct {
	ClientIp string   `protobuf:"bytes,1,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	ServerIp string   `protobuf:"bytes,2,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	Tags     []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	Message  string   `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
}

func (m *LoggingData) Reset()                    { *m = LoggingData{} }
func (m *LoggingData) String() string            { return proto.CompactTextString(m) }
func (*LoggingData) ProtoMessage()               {}
func (*LoggingData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LoggingData) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *LoggingData) GetServerIp() string {
	if m != nil {
		return m.ServerIp
	}
	return ""
}

func (m *LoggingData) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *LoggingData) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type LoggingResponse struct {
	Status  bool     `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Errors  []string `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
}

func (m *LoggingResponse) Reset()                    { *m = LoggingResponse{} }
func (m *LoggingResponse) String() string            { return proto.CompactTextString(m) }
func (*LoggingResponse) ProtoMessage()               {}
func (*LoggingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LoggingResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *LoggingResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *LoggingResponse) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

type QueryRequest struct {
	ClientIp string   `protobuf:"bytes,1,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	ServerIp string   `protobuf:"bytes,2,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	Tags     []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *QueryRequest) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *QueryRequest) GetServerIp() string {
	if m != nil {
		return m.ServerIp
	}
	return ""
}

func (m *QueryRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type QueryResponse struct {
	Status  bool           `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Errors  []string       `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
	Results []*AuditRecord `protobuf:"bytes,3,rep,name=results" json:"results,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *QueryResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *QueryResponse) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *QueryResponse) GetResults() []*AuditRecord {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*AuditRecord)(nil), "logging.AuditRecord")
	proto.RegisterType((*LoggingRequest)(nil), "logging.LoggingRequest")
	proto.RegisterType((*LoggingData)(nil), "logging.LoggingData")
	proto.RegisterType((*LoggingResponse)(nil), "logging.LoggingResponse")
	proto.RegisterType((*QueryRequest)(nil), "logging.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "logging.QueryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Logging service

type LoggingClient interface {
	Create(ctx context.Context, in *LoggingRequest, opts ...grpc.CallOption) (*LoggingResponse, error)
	Fetch(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
}

type loggingClient struct {
	cc *grpc.ClientConn
}

func NewLoggingClient(cc *grpc.ClientConn) LoggingClient {
	return &loggingClient{cc}
}

func (c *loggingClient) Create(ctx context.Context, in *LoggingRequest, opts ...grpc.CallOption) (*LoggingResponse, error) {
	out := new(LoggingResponse)
	err := grpc.Invoke(ctx, "/logging.Logging/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggingClient) Fetch(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := grpc.Invoke(ctx, "/logging.Logging/Fetch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Logging service

type LoggingServer interface {
	Create(context.Context, *LoggingRequest) (*LoggingResponse, error)
	Fetch(context.Context, *QueryRequest) (*QueryResponse, error)
}

func RegisterLoggingServer(s *grpc.Server, srv LoggingServer) {
	s.RegisterService(&_Logging_serviceDesc, srv)
}

func _Logging_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggingServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logging.Logging/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggingServer).Create(ctx, req.(*LoggingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logging_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggingServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logging.Logging/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggingServer).Fetch(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logging_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logging.Logging",
	HandlerType: (*LoggingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Logging_Create_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _Logging_Fetch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logging.proto",
}

func init() { proto.RegisterFile("logging.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x25, 0x6d, 0x69, 0xda, 0x6b, 0x0b, 0x92, 0x05, 0x25, 0x2a, 0x4b, 0x95, 0xa9, 0x03, 0xca,
	0x50, 0x16, 0x16, 0x06, 0x0a, 0x42, 0xaa, 0xc4, 0x50, 0xb2, 0x82, 0x84, 0x42, 0x7a, 0x0a, 0x91,
	0xd2, 0xd8, 0xd8, 0x67, 0x04, 0x2b, 0x5f, 0x8e, 0x92, 0xd8, 0x21, 0x85, 0x81, 0x89, 0x6e, 0xb9,
	0x7b, 0xef, 0xde, 0x7b, 0x39, 0x9d, 0x61, 0x94, 0xf1, 0x24, 0x49, 0xf3, 0x24, 0x10, 0x92, 0x13,
	0x67, 0xae, 0x29, 0x7d, 0x0d, 0x83, 0x2b, 0xbd, 0x4e, 0x29, 0xc4, 0x98, 0xcb, 0x35, 0x3b, 0x85,
	0x7e, 0x9c, 0xa5, 0x98, 0xd3, 0x53, 0x2a, 0x3c, 0x67, 0xea, 0xcc, 0xfa, 0x61, 0xaf, 0x6a, 0x2c,
	0x45, 0x01, 0x2a, 0x94, 0x6f, 0x28, 0x0b, 0xb0, 0x55, 0x81, 0x55, 0x63, 0x29, 0x18, 0x83, 0x0e,
	0x45, 0x89, 0xf2, 0xda, 0xd3, 0xf6, 0xac, 0x1f, 0x96, 0xdf, 0xcc, 0x03, 0x77, 0x83, 0x4a, 0x45,
	0x09, 0x7a, 0x9d, 0x92, 0x6e, 0x4b, 0xff, 0x1d, 0x0e, 0xee, 0xaa, 0x04, 0x21, 0xbe, 0x6a, 0x54,
	0xb4, 0x33, 0x67, 0x0d, 0x03, 0xe3, 0x7c, 0x13, 0x51, 0xb4, 0x33, 0xdb, 0x07, 0x38, 0xac, 0x7f,
	0x58, 0x09, 0x9e, 0x2b, 0x64, 0x63, 0xe8, 0x2a, 0x8a, 0x48, 0xab, 0xd2, 0xb7, 0x17, 0x9a, 0xaa,
	0x29, 0xd2, 0xda, 0x12, 0x29, 0x26, 0x50, 0x4a, 0x2e, 0xad, 0xa9, 0xa9, 0xfc, 0x47, 0x18, 0xde,
	0x6b, 0x94, 0x1f, 0xff, 0xb2, 0x4b, 0x9f, 0xc3, 0xc8, 0xa8, 0xff, 0x11, 0xfc, 0x3b, 0x5e, 0xab,
	0x19, 0x8f, 0x05, 0xe0, 0x4a, 0x54, 0x3a, 0xa3, 0x4a, 0x77, 0x30, 0x3f, 0x0a, 0xec, 0x35, 0x36,
	0x6e, 0x2f, 0xb4, 0xa4, 0xf9, 0xa7, 0x03, 0xae, 0x59, 0x16, 0xbb, 0x84, 0xee, 0xb5, 0xc4, 0x88,
	0x90, 0x9d, 0xd4, 0x43, 0xdb, 0x97, 0x33, 0xf1, 0x7e, 0x03, 0x55, 0x50, 0x7f, 0x8f, 0x5d, 0xc0,
	0xfe, 0x2d, 0x52, 0xfc, 0xc2, 0x8e, 0x6b, 0x52, 0x73, 0x53, 0x93, 0xf1, 0xcf, 0xb6, 0x9d, 0x5c,
	0x9c, 0xc1, 0x24, 0xe5, 0x41, 0x22, 0x45, 0x1c, 0xa4, 0x1b, 0x91, 0xe1, 0x06, 0x73, 0x52, 0x96,
	0xbd, 0x18, 0x1a, 0xab, 0x55, 0xf1, 0x9a, 0x56, 0xce, 0x73, 0xb7, 0x7c, 0x56, 0xe7, 0x5f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xe0, 0xa7, 0x36, 0xd3, 0x67, 0x03, 0x00, 0x00,
}
