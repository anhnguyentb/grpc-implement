// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anhnguyentb/grpc-implement/logging (interfaces: LoggingClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	logging "github.com/anhnguyentb/grpc-implement/logging"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockLoggingClient is a mock of LoggingClient interface
type MockLoggingClient struct {
	ctrl     *gomock.Controller
	recorder *MockLoggingClientMockRecorder
}

// MockLoggingClientMockRecorder is the mock recorder for MockLoggingClient
type MockLoggingClientMockRecorder struct {
	mock *MockLoggingClient
}

// NewMockLoggingClient creates a new mock instance
func NewMockLoggingClient(ctrl *gomock.Controller) *MockLoggingClient {
	mock := &MockLoggingClient{ctrl: ctrl}
	mock.recorder = &MockLoggingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoggingClient) EXPECT() *MockLoggingClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockLoggingClient) Create(arg0 context.Context, arg1 *logging.LoggingRequest, arg2 ...grpc.CallOption) (*logging.LoggingResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*logging.LoggingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockLoggingClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLoggingClient)(nil).Create), varargs...)
}

// Fetch mocks base method
func (m *MockLoggingClient) Fetch(arg0 context.Context, arg1 *logging.QueryRequest, arg2 ...grpc.CallOption) (*logging.QueryResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Fetch", varargs...)
	ret0, _ := ret[0].(*logging.QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockLoggingClientMockRecorder) Fetch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockLoggingClient)(nil).Fetch), varargs...)
}
